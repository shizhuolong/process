b257afccfb1fca5e5a9a0b202acf999fd822aedd
 APDPlatContextLoaderListener.java | 55 ++++++++++++++++++++++++++++++++++++---
 1 file changed, 51 insertions(+), 4 deletions(-)

diff --git APDPlatContextLoaderListener.java APDPlatContextLoaderListener.java
index 001abc3..04eef47 100644
--- APDPlatContextLoaderListener.java
+++ APDPlatContextLoaderListener.java
@@ -14,10 +14,18 @@
  * limitations under the License.
  */
 
-package org.springframework.web.context;
+package com.apdplat.platform.spring;
 
+import com.apdplat.module.system.service.SystemListener;
+import java.util.Enumeration;
+import javax.servlet.ServletContext;
 import javax.servlet.ServletContextEvent;
 import javax.servlet.ServletContextListener;
+import org.apache.commons.logging.Log;
+import org.apache.commons.logging.LogFactory;
+import org.springframework.beans.factory.DisposableBean;
+import org.springframework.web.context.ContextLoader;
+import org.springframework.web.context.WebApplicationContext;
 
 /**
  * Bootstrap listener to start up and shut down Spring's root {@link WebApplicationContext}.
@@ -31,7 +39,7 @@ import javax.servlet.ServletContextListener;
  * @since 17.02.2003
  * @see org.springframework.web.util.Log4jConfigListener
  */
-public class ContextLoaderListener extends ContextLoader implements ServletContextListener {
+public class APDPlatContextLoaderListener extends ContextLoader implements ServletContextListener {
 
 	private ContextLoader contextLoader;
 
@@ -40,6 +48,7 @@ public class ContextLoaderListener extends ContextLoader implements ServletConte
 	 * Initialize the root web application context.
 	 */
 	public void contextInitialized(ServletContextEvent event) {
+            SystemListener.contextInitialized(event);
 		this.contextLoader = createContextLoader();
 		if (this.contextLoader == null) {
 			this.contextLoader = this;
@@ -50,7 +59,7 @@ public class ContextLoaderListener extends ContextLoader implements ServletConte
 	/**
 	 * Create the ContextLoader to use. Can be overridden in subclasses.
 	 * @return the new ContextLoader
-	 * @deprecated in favor of simply subclassing ContextLoaderListener itself
+	 * @deprecated in favor of simply subclassing APDPlatContextLoaderListener itself
 	 * (which extends ContextLoader, as of Spring 3.0)
 	 */
 	@Deprecated
@@ -61,7 +70,7 @@ public class ContextLoaderListener extends ContextLoader implements ServletConte
 	/**
 	 * Return the ContextLoader used by this listener.
 	 * @return the current ContextLoader
-	 * @deprecated in favor of simply subclassing ContextLoaderListener itself
+	 * @deprecated in favor of simply subclassing APDPlatContextLoaderListener itself
 	 * (which extends ContextLoader, as of Spring 3.0)
 	 */
 	@Deprecated
@@ -74,10 +83,48 @@ public class ContextLoaderListener extends ContextLoader implements ServletConte
 	 * Close the root web application context.
 	 */
 	public void contextDestroyed(ServletContextEvent event) {
+            SystemListener.contextDestroyed(event);
 		if (this.contextLoader != null) {
 			this.contextLoader.closeWebApplicationContext(event.getServletContext());
 		}
 		ContextCleanupListener.cleanupAttributes(event.getServletContext());
 	}
 
+}
+class ContextCleanupListener implements ServletContextListener {
+
+	private static final Log logger = LogFactory.getLog(ContextCleanupListener.class);
+
+
+	public void contextInitialized(ServletContextEvent event) {
+	}
+
+	public void contextDestroyed(ServletContextEvent event) {
+		cleanupAttributes(event.getServletContext());
+	}
+
+
+	/**
+	 * Find all ServletContext attributes which implement {@link DisposableBean}
+	 * and destroy them, removing all affected ServletContext attributes eventually.
+	 * @param sc the ServletContext to check
+	 */
+	static void cleanupAttributes(ServletContext sc) {
+		Enumeration attrNames = sc.getAttributeNames();
+		while (attrNames.hasMoreElements()) {
+			String attrName = (String) attrNames.nextElement();
+			if (attrName.startsWith("org.springframework.")) {
+				Object attrValue = sc.getAttribute(attrName);
+				if (attrValue instanceof DisposableBean) {
+					try {
+						((DisposableBean) attrValue).destroy();
+					}
+					catch (Throwable ex) {
+						logger.error("Couldn't invoke destroy method of attribute with name '" + attrName + "'", ex);
+					}
+				}
+			}
+		}
+	}
+
 }
