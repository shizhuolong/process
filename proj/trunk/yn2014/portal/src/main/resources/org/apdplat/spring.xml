<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/tx       http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop      http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/context  http://www.springframework.org/schema/context/spring-context-3.2.xsd">
    <context:component-scan base-package="${basePackage}" />
       
   <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.minPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.idleConnectionTestPeriod}" />
		<property name="driverClass" value="${db.driver}" />
		<property name="jdbcUrl" value="${db.url}" />
		<property name="user" value="${db.username}" />
		<property name="password" value="${db.password}" />
	</bean>
    
   <bean id="dataSourceForLog" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="maxPoolSize" value="${c3p0.forlog.maxPoolSize}" />
		<property name="minPoolSize" value="${c3p0.forlog.minPoolSize}" />
		<property name="maxIdleTime" value="${c3p0.forlog.maxIdleTime}" />
		<property name="acquireIncrement" value="${c3p0.forlog.acquireIncrement}" />
		<property name="idleConnectionTestPeriod" value="${c3p0.forlog.idleConnectionTestPeriod}" />
		<property name="driverClass" value="${db.forlog.driver}" />
		<property name="jdbcUrl" value="${db.forlog.url}" />
		<property name="user" value="${db.forlog.username}" />
		<property name="password" value="${db.forlog.password}" />
	</bean>

        <!-- 用p6spy 在console显示变量绑定后的真实sql 与ResultSet,方便开发 
    <bean id="dataSourceSpy" class="com.p6spy.engine.spy.P6DataSource">
        <constructor-arg index="0" ref="dataSource"/>
    </bean>
    <bean id="dataSourceForLogSpy" class="com.p6spy.engine.spy.P6DataSource">
        <constructor-arg index="0" ref="dataSourceForLog"/>
    </bean>
    -->
    
    <bean id="entityManagerFactory" class="org.apdplat.platform.spring.APDPlatLocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath*:org/apdplat/jpa2.xml" />
        <property name="dataSource" ref="${dataSource}" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="database" value="${jpa.database}" />
                <property name="showSql" value="${jpa.show_sql}" />
                <property name="generateDdl" value="${jpa.generateDdl}" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.cache.provider_class}</prop>
                <prop key="hibernate.memcached.servers">${hibernate.memcached.servers}</prop>
            </props>
        </property>
    </bean>

    <bean id="entityManagerFactoryForLog" class="org.apdplat.platform.spring.APDPlatLocalContainerEntityManagerFactoryBean">
        <property name="persistenceXmlLocation" value="classpath*:org/apdplat/jpa2_for_log.xml" />
        <property name="dataSource" ref="${dataSourceForLog}" />
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <!--  <property name="database" value="${jpa.forlog.database}" />-->
                <property name="database" value="${jpa.database}" />
                <property name="showSql" value="${jpa.forlog.show_sql}" />
                <property name="generateDdl" value="${jpa.forlog.generateDdl}" />
            </bean>
        </property>
        <property name="jpaProperties">
            <props>
                <prop key="hibernate.format_sql">${hibernate.forlog.format_sql}</prop>
                <prop key="hibernate.max_fetch_depth">${hibernate.forlog.max_fetch_depth}</prop>
                <prop key="hibernate.jdbc.fetch_size">${hibernate.forlog.jdbc.fetch_size}</prop>
                <prop key="hibernate.jdbc.batch_size">${hibernate.forlog.jdbc.batch_size}</prop>
                <prop key="hibernate.cache.use_second_level_cache">${hibernate.forlog.cache.use_second_level_cache}</prop>
                <prop key="hibernate.cache.use_structured_entries">${hibernate.forlog.cache.use_structured_entries}</prop>
                <prop key="hibernate.cache.use_query_cache">${hibernate.forlog.cache.use_query_cache}</prop>
                <prop key="hibernate.cache.region.factory_class">${hibernate.forlog.cache.region.factory_class}</prop>
                <prop key="hibernate.cache.provider_class">${hibernate.forlog.cache.provider_class}</prop>
                <prop key="hibernate.memcached.servers">${hibernate.forlog.memcached.servers}</prop>
            </props>
        </property>
    </bean>

    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory" />
    </bean>

    <bean id="transactionManagerForLog" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactoryForLog" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager" />
    
    <tx:annotation-driven transaction-manager="transactionManagerForLog" />

	<!-- Spring属性文件解密组件  -->
    <bean id="propertyConfigurer" class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
        <constructor-arg ref="configurationEncryptor" />
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreResourceNotFound" value="true" />
        <property name="locations">
            <list>
                <value>classpath:/org/apdplat/config.properties</value>
                <value>classpath:config.local.properties</value>
                <value>classpath:/org/apdplat/db.properties</value>
                <value>classpath:db.local.properties</value>
            </list>
        </property>
    </bean>    

    <bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
        <property name="config" ref="environmentVariablesConfiguration" />
    </bean>

    <bean id="environmentVariablesConfiguration" class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig">
        <property name="algorithm" value="PBEWithMD5AndDES" />
        <property name="password" value="config" />
    </bean>
         <!-- 引用ehCache的配置 -->
    <bean id="defaultCacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation">
            <value>classpath:ehcache.xml</value>
        </property>
    </bean>

         <!-- 定义ehCache的工厂，并设置所使用的Cache name -->
    <bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
        <property name="cacheManager">
            <ref local="defaultCacheManager"/>
        </property>
        <property name="cacheName">
            <value>DEFAULT_CACHE</value>
        </property>
    </bean>

    <!--定义定时执行 backupServiceExecuter 这个bean中的backup()方法-->
   <!--  <bean id="backupTask"    class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
        <property name="targetObject">
            <ref bean="backupServiceExecuter" />    
        </property>
        <property name="targetMethod">
            <value>backup</value>
        </property>
    </bean> -->
    
    <!-- Activiti begin -->
     <!-- 
    	配置processEngineConfiguration的时候属性transactionManager要使用和业务功能的同一个事务管理Bean，否则事务不同步 
    	由Spring代理创建引擎，最最重要的是如果把引擎嵌入到业务系统中可以做到业务事务与引擎事务的统一管理
    -->
    <bean id="processEngineConfiguration" class="org.activiti.spring.SpringProcessEngineConfiguration">
        <property name="dataSource" ref="dataSource"/>
        <property name="transactionManager" ref="transactionManager"/>
        <property name="databaseSchemaUpdate" value="false"/>
        <property name="jobExecutorActivate" value="false"/>
        <property name="history" value="full"/>
        <property name="processDefinitionCacheLimit" value="10"/>
        <!-- 生成流程图的字体 -->
        <property name="activityFontName" value="宋体"/>
        <property name="labelFontName" value="宋体"/>
        <!-- 自动部署 -->
        <property name="deploymentResources">
            <list>
                <value>classpath*:/deployments/*</value>
            </list>
        </property>
    </bean>

    <bean id="processEngine" class="org.activiti.spring.ProcessEngineFactoryBean">
        <property name="processEngineConfiguration" ref="processEngineConfiguration"/>
    </bean>

    <bean id="repositoryService" factory-bean="processEngine" factory-method="getRepositoryService"/>
    <bean id="runtimeService" factory-bean="processEngine" factory-method="getRuntimeService"/>
    <bean id="formService" factory-bean="processEngine" factory-method="getFormService"/>
    <bean id="identityService" factory-bean="processEngine" factory-method="getIdentityService"/>
    <bean id="taskService" factory-bean="processEngine" factory-method="getTaskService"/>
    <bean id="historyService" factory-bean="processEngine" factory-method="getHistoryService"/>
    <bean id="managementService" factory-bean="processEngine" factory-method="getManagementService"/>
    <!-- Activiti end -->
    
    <bean id="serviceFacadeForLog" class="org.apdplat.platform.service.ServiceFacade">
        <property name="dao" ref="daoFacadeForLog"/>
    </bean>
    
    <bean id="daoFacadeForLog" class="org.apdplat.platform.dao.DaoFacade">
        <constructor-arg>
            <value type="org.apdplat.platform.dao.MultiDatabase">APDPlatForLog</value>
        </constructor-arg>  
    </bean>
      
     
   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
   		<property name="dataSource" ref="dataSource" /> 
    	<property name="configLocation" value="classpath:mybatis-config-portal.xml" />
   </bean>
   
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">  
        <property name="basePackage" value="org.apdplat.portal.*.dao,org.apdplat.workflow.dao,org.apdplat.performanceAppraisal.*.dao,
        org.apdplat.taskManagement.*.dao,org.apdplat.report.*.dao,org.apdplat.warningAndMonitor.*.dao,org.apdplat.monitorUser.*.dao,org.apdplat.manager.dao," />   
    </bean>      
   
   
   <bean id="imageCaptchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">    
        <constructor-arg type="com.octo.captcha.service.captchastore.CaptchaStore" index="0">    
            <ref bean="fastHashMapCaptchaStore"/>    
        </constructor-arg>          
        <constructor-arg type="com.octo.captcha.engine.CaptchaEngine" index="1">    
            <ref bean="captchaEngineEx"/>    
        </constructor-arg>       
        <constructor-arg index="2">       
            <value>180</value>       
        </constructor-arg>       
        <constructor-arg index="3">       
            <value>100000</value>       
        </constructor-arg>       
        <constructor-arg index="4">       
            <value>75000</value>       
        </constructor-arg>      
    </bean>    
    <bean id="fastHashMapCaptchaStore"   
        class="com.octo.captcha.service.captchastore.FastHashMapCaptchaStore">
    </bean>
	<bean id="captchaEngineEx"   
        class="org.apdplat.module.security.service.filter.CaptchaEngineEx">
    </bean>
    
    <!-- dbutils -->
    <bean id="defaultSqlSupport" class="org.apdplat.wgreport.support.db.impl.DefaultSqlSupport">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="oneResultSetHandler" class="org.apache.commons.dbutils.handlers.MapHandler">
		<constructor-arg>
			<!-- 20090716 行处理支持 -->
			<bean class="org.apdplat.wgreport.support.thirdpart.dbutils.BasicRowProcessor" />
		</constructor-arg>
	</bean>
	<bean id="listResultSetHandler" class="org.apache.commons.dbutils.handlers.MapListHandler" parent="oneResultSetHandler"/>
	<bean id="arrayoneResultSetHandler" class="org.apache.commons.dbutils.handlers.ArrayHandler" parent="oneResultSetHandler"/>
	<bean id="arraylistResultSetHandler" class="org.apache.commons.dbutils.handlers.ArrayListHandler" parent="oneResultSetHandler"/>
	<bean id="sqlSupport" parent="defaultSqlSupport">
		<property name="oneResultSetHandler" ref="oneResultSetHandler" />
		<property name="listResultSetHandler" ref="listResultSetHandler" />
	</bean>
	<bean id="arraySqlSupport" parent="defaultSqlSupport">
		<property name="oneResultSetHandler" ref="arrayoneResultSetHandler" />
		<property name="listResultSetHandler" ref="arraylistResultSetHandler" />
	</bean>
	<!-- excel文件下载组件 -->
	<bean id="excelComponent" class="org.apdplat.wgreport.detail.DetailDownLoadUtil" />
	
	<bean class="org.apdplat.wgreport.support.preferense.Config" init-method="init" lazy-init="false">
		<property name="configPropertyLocations">
			<list>
				<value>classpath:reportconfig.properties</value>
			</list>
		</property>
	</bean>
	<bean id="ssoTaskService" class="com.ynunicom.sso.service.SsoTaskService"/>
</beans>